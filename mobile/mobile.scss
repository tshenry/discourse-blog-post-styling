@import "common/foundation/variables";

/// str-split function found at: https://github.com/sass-projects/stringy/blob/master/src/scss/_str-split.scss
/// License: MIT

/// String split
///
/// Splits a String into a list of substrings using `$separator`.
/// If separator is omitted, the list returned contains one element consisting of the entire string.
/// If separator is an empty string, str is converted to a list of all characters.
/// Integer specifying a limit on the number of splits to be found.
/// The split method still splits on every match of separator, but it truncates the returned list to at most limit elements.
///
/// @param {string}  $string
/// @param {string}  $separator
/// @param {$number} $limit
///
/// @return {list}
///
/// @author pascalduez https://gist.github.com/pascalduez/065e560c6314c7e9d7f8
@function str-split($string, $separator: null, $limit: null) {
  $string: unquote($string);

  @if type-of($string) != "string" {
    @error "`str-split` function expecting a string for $string; #{type-of($string)} given.";
  }

  $result: zip(());

  @if not $separator {
    @return ($string);
  }

  @if $separator == "" {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $running: true;
  $progress: $string;
  $length: str-length($separator);

  @while $running {
    $index: str-index($progress, $separator);
    @if $index {
      $result: append($result, str-slice($progress, 1, ($index - 1)));
      $progress: str-slice($progress, ($index + $length));
    } @else {
      $running: false;
    }
  }

  $result: append($result, $progress);

  @if $limit and $limit > 0 {
    $limit: if($limit > length($result), length($result), $limit);
    $return: ();
    @for $i from 1 through $limit {
      $return: append($return, nth($result, $i));
    }

    @return $return;
  }

  @return $result;
}

@if $mobile_enabled == "true" {
  $values: $blog_category;
  $split-values: str-split($values, ",");
  @each $value in $split-values {
    .category-#{$value} {
      @extend %blog-category;
    }
  }

  $values: $blog_tag;
  $split-values: str-split($values, "|");
  @each $value in $split-values {
    .tag-#{$value} {
      @extend %blog-tag;
    }
  }

  %blog-tag,
  %blog-category {
    #topic-title {
      margin-top: 1em;
    }
    .blog-image-container {
      text-align: center;
      .blog-image img {
        width:100%;
        height:100%;
        border-radius:2em;
        box-shadow:0 1px 2px rgba(0,0,0,.2);
        @if $image_display_style == 'responsive crop' {
          background-size: cover;
          width: 100%;
        }
      }
    }
    .posts-wrapper {padding-top:0;}
    #post_1 {
         .topic-body {
        padding-top: 0px;

        &.highlighted {
          animation: none;
        }

        .topic-meta-data {
          .names {
            flex-wrap: nowrap;
            .second,
            .user-title {
              flex-basis: unset;
            }
          }

          .post-infos {
            display: flex;
            justify-content: space-between;
            .post-info.edits {
              float: right;
              margin-left: 5px;
              order: 1;
            }
            .post-info.post-date {
              float: left;
            }
          }
        }
        /*.contents {
          border-top: 1px solid var(--primary-low);
        }*/
      }

      .cooked {
        big {
          font-size: 2rem;
          line-height: 2rem;
          letter-spacing: 1px;
          display: inline-block;
          font-family: Georgia;
        }

        & > p:first-child + div.lightbox-wrapper {
          display: none;
          & + p {
            margin-top: -15px;
          }
        }

        & > p img:not(.emoji) {
          display: none;
        }

        & > p ~ p img:not(.emoji) {
          display: block;
        }
      }
    }

    #topic-title h1 a.fancy-title {
      font-size:1em;
    }
    .topic-post article {
      border-top: none !important;
    }

    .topic-post:first-child {
      .cooked {
        font-size: 1.25em;
        .lightbox-wrapper .meta {
          font-size: 0.75em;
        }
      }

      nav.post-controls .actions,
      .topic-map,
      .post-admin-menu {
        font-size: 0.75em;
      }

      figure {
        margin: 0;
      }

      figcaption {
        margin-top: -16px;
        font-size: 0.8em;
        font-weight: bold;
      }

      blockquote {
        background: var(--primary-very-low);
        color: var(--primary-high);
        border-left: 10px solid var(--primary-low-mid);
        padding: 0.5em 10px;
      }
      blockquote:before {
        color: var(--primary-low-mid);
        content: open-quote;
        font-size: 4em;
        line-height: 0.1em;
        vertical-align: -0.4em;
      }
      blockquote p {
        display: inline;
      }
    }
  }
}
